<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Audio Viewer</title>
  <link rel="stylesheet" href="viewer-style.css" />
  <script src="axios.min.js"></script>
  <script src="viewer.js"></script>
  <style>
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background: black;
      overflow: hidden;
    }

    .circle {
      width: 300px;
      height: 300px;
      border-radius: 50%;
      background: radial-gradient(circle, rgba(0, 0, 0, 0.8) 60%, rgba(0, 0, 0, 0.3));
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
      box-shadow: 0 0 50px rgba(255, 255, 255, 0.3);
      overflow: hidden;
      transform: scale(1);
      transition: transform 0.1s ease-in-out;
    }

    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    footer {
      position: absolute;
      bottom: 10px;
      color: white;
    }

    button {
      position: absolute;
      top: 100px;
      z-index: 10;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>

<header>
  <img src="logo.png" alt="Logo" />
  <h1>QURB REHBER</h1>
</header>

<audio autoplay controls id="audio"></audio>
<button id="my-button">Yayına Dinle</button>

<div class="circle" id="circle">
  <canvas id="siriCanvas"></canvas>
</div>

<footer>
  <p>&copy; 2024 QURB | All Rights Reserved</p>
</footer>

<script>
  // WebRTC and audio handling
  window.onload = () => {
    document.getElementById("my-button").onclick = () => {
      init();
    };
  };

  async function init() {
    const peer = createPeer();
    peer.addTransceiver("audio", { direction: "recvonly" }); // Only receive audio
  }

  function createPeer() {
    const peer = new RTCPeerConnection({
      iceServers: [
        {
          urls: "stun:192.168.4.1:3478",
        },
      ],
    });
    peer.ontrack = handleTrackEvent;
    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(peer);

    return peer;
  }

  async function handleNegotiationNeededEvent(peer) {
    const offer = await peer.createOffer();
    await peer.setLocalDescription(offer);
    const payload = {
      sdp: peer.localDescription,
    };

    const { data } = await axios.post("/consumer", payload);
    const desc = new RTCSessionDescription(data.sdp);
    peer.setRemoteDescription(desc).catch((e) => console.log(e));
  }

  function handleTrackEvent(e) {
    const audioElement = document.getElementById("audio");
    audioElement.srcObject = e.streams[0]; // Set stream to audio element

    // Ses verisini analiz et ve animasyonu başlat
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const analyser = audioContext.createAnalyser();
    const dataArray = new Uint8Array(256);

    const sourceNode = audioContext.createMediaStreamSource(e.streams[0]);
    sourceNode.connect(analyser);
    analyser.connect(audioContext.destination);

    // Animasyonu başlat
    animate(analyser, dataArray);
  }

  function animate(analyser, dataArray) {
    analyser.getByteFrequencyData(dataArray);

    // Sesin gücüne bağlı olarak yuvarlağı büyütme/küçültme
    const averageFrequency = dataArray.reduce((a, b) => a + b) / dataArray.length;
    const scale = 1 + averageFrequency / 128; // Ses şiddetiyle scale değeri belirle
    document.getElementById("circle").style.transform = `scale(${scale})`;

    // Dalgaları çiz
    drawCircles();

    requestAnimationFrame(() => animate(analyser, dataArray));
  }

  const canvas = document.getElementById("siriCanvas");
  const ctx = canvas.getContext("2d");
  canvas.width = 300;
  canvas.height = 300;

  let circles = [];

  // Siri benzeri ışık dalgaları oluştur
  function createCircle() {
    return {
      x: canvas.width / 2,
      y: canvas.height / 2,
      radius: Math.random() * 30 + 50,
      color: `hsla(${Math.random() * 360}, 100%, 50%, 0.6)`,
      angle: Math.random() * Math.PI * 2,
      speed: Math.random() * 0.05 + 0.02
    };
  }

  function initCircles() {
    circles = [];
    for (let i = 0; i < 6; i++) { // 6 ışıklı dalga
      circles.push(createCircle());
    }
  }

  function drawCircles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.globalCompositeOperation = "lighter"; // Renkleri karıştır
    circles.forEach((circle) => {
      circle.angle += circle.speed;

      const offsetX = Math.cos(circle.angle) * 30;
      const offsetY = Math.sin(circle.angle) * 30;

      ctx.beginPath();
      ctx.arc(circle.x + offsetX, circle.y + offsetY, circle.radius, 0, Math.PI * 2);
      ctx.fillStyle = circle.color;
      ctx.fill();
    });
  }

  // Başlat
  initCircles();
  drawCircles();
</script>
</body>
</html>
